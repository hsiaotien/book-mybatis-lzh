<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="tk.mybatis.simple.mapper.UserMapper04">
    <!--insert中使用if， 列部分和values部分要增加相同的if条件，保持对应，保证完全匹配-->
    <insert id="insert" useGeneratedKeys="true" keyProperty="id">
         INSERT INTO `sys_user`(
              `user_name`,
              `user_password`,
              <if test="userEmail != null and userEmail != ''">
                  `user_email`,
              </if>
              `user_info`,
              `head_img`,
              `create_time` )
        VALUES(
              #{userName},
              #{userPassword},
              <if test="userEmail != null and userEmail != ''">
                  #{userEmail},
              </if>
              #{userInfo},
              #{headImg,jdbcType= BLOB},
              #{createTime,jdbcType= TIMESTAMP});
    </insert>

    <!--update语句中使用if 标签  冗余id = #{id}-->
    <update id="updateByIdSelective">
        update sys_user
        set
            <if test="userName != null and userName != ''">
                user_name = #{userName},
            </if>
            <if test="userPassword != null and userPassword != ''">
                user_password = #{userPassword},
            </if>
            <if test="userEmail != null and userEmail != ''">
                user_email = #{userEmail},
            </if>
            <if test="userInfo != null and userInfo != ''">
                user_info = #{userInfo},
            </if>
            <if test="headImg != null">
                head_img = #{headImg,jdbcType=BLOB},
            </if>
            <if test="createTime != null and createTime != ''">
                create_time = #{createTime},
            </if>
            id = #{id}
            where id = #{id}
    </update>

    <!-- set 用法，剔除包含元素的字符串后面的逗号，但并没有完全解决问题，仍然需要注意sql拼接-->
    <update id="updateByIdSelective02">
        update `sys_user`
        <set>
            <if test="userName != null and userName != ''">
                user_name = #{userName},
            </if>
            <if test="userPassword != null and userPassword != ''">
                user_password = #{userPassword},
            </if>
            <if test="userEmail != null and userEmail != ''">
                user_email = #{userEmail},
            </if>
            <if test="userInfo != null and userInfo != ''">
                user_info = #{userInfo},
            </if>
            <if test="headImg != null">
                head_img = #{headImg,jdbcType=BLOB},
            </if>
            <if test="createTime != null and createTime != ''">
                create_time = #{createTime},
            </if>
            id = #{id},
        </set>
        where id = #{id}
    </update>

    <!--select 中使用if标签 冗余1=1-->
    <select id="selectByUser04"
            resultType="tk.mybatis.simple.model.SysUser04">
        select id,
          user_name userName,
          user_password userPassword,
          user_email userEmail,
          user_info userInfo,
          head_img headImg,
          create_time createTime
        from sys_user
        where 1 = 1
        <if test="userName != null and userName != ''">
            and user_name like concat('%',#{userName},'%')
        </if>
        <if test="userEmail != null and userEmail != ''">
            and user_email = #{userEmail}
        </if>
    </select>
    <!--choose用法-->
    <select id="selectByIdOrUserName" resultType="tk.mybatis.simple.model.SysUser04">
        select id,
          user_name userName,
          user_password userPassword,
          user_email userEmail,
          user_info userInfo,
          head_img headImg,
          create_time createTime
        from `sys_user`
        where 1=1
        <choose>
            <when test="id != null">
                and id = #{id}
            </when>
            <when test="userName != null and userName != ''">
                and user_name = #{userName}
            </when>
            <otherwise>
                and 1 = 2
            </otherwise>
        </choose>
    </select>
    <!--where 的用法，自动去掉and以及where元素没有内容，也不会出现问题-->
    <select id="selectByUserWithWhere" resultType="tk.mybatis.simple.model.SysUser04">
        select id,
          user_name userName,
          user_password userPassword,
          user_email userEmail,
          user_info userInfo,
          head_img headImg,
          create_time createTime
        from `sys_user`
        <where>
            <if test="userName != null and userName != ''">
                and user_name like concat('%',userName,'%')
            </if>
            <if test="userEmail != null and userEmail != ''">
                and user_email = #{userEmail}
            </if>
        </where>
    </select>
    <!--trim用法，where和set标签的功能都可以用trim标签实现，并在底层就是通过TrimSqlNode实现。 暂时不演示-->

    <!--foreach用法示例01  collection = list 看源码分析DefaultSqlSession.wrapCollection-->
    <select id="selectUserByIdList" resultType="tk.mybatis.simple.model.SysUser04">
        select id,
          user_name userName,
          user_password userPassword,
          user_email userEmail,
          user_info userInfo,
          head_img headImg,
          create_time createTime
        from `sys_user`
        where id in
        <foreach collection="list" open="(" close=")" index="i" item="id" separator=",">
            #{id}
        </foreach>
    </select>

    <!--foreach用法示例02  collection = array 看源码分析DefaultSqlSession.wrapCollection-->
    <select id="selectUserByIdArr" resultType="tk.mybatis.simple.model.SysUser04">
        select id,
        user_name userName,
        user_password userPassword,
        user_email userEmail,
        user_info userInfo,
        head_img headImg,
        create_time createTime
        from `sys_user`
        where id in
        <foreach collection="array" open="(" close=")" index="i" item="id" separator=",">
            #{id}
        </foreach>
    </select>

    <!--foreach的示例03 ，建议使用这种方式，@Param注解来明确指代名字-->
    <select id="selectUserByIdListWithAnno" resultType="tk.mybatis.simple.model.SysUser04">
        select id,
        user_name userName,
        user_password userPassword,
        user_email userEmail,
        user_info userInfo,
        head_img headImg,
        create_time createTime
        from `sys_user`
        where id in
        <foreach collection="idList" open="(" close=")" index="i" item="id" separator=",">
            #{id}
        </foreach>
    </select>

    <!--bind的示例，避免数据库更换而修改sql，同时也可以防止sql注入-->
    <select id="selectByBind" resultType="tk.mybatis.simple.model.SysUser04">
        select id,
            user_name userName,
            user_password userPassword,
            user_email userEmail,
            user_info userInfo,
            head_img headImg,
            create_time createTime
        from `sys_user`
        <where>
            <if test="userName != null and userName !=''">
                <bind name="userNameLike" value="'%'+userName+'%'"/>
                and user_name like #{userNameLike}
            </if>
        </where>
    </select>

    <!--foreach实现批量插入, foreach 进行sql的拼接，并用到对象的属性.属性，进行深层属性值的指定-->
    <insert id="insertList">
        insert into `sys_user` (
        `user_name`,`user_password`,`user_email`,`user_info`,`head_img`,`create_time`
        ) values
        <foreach collection="list" item="user" separator=",">
            (
            #{user.userName},
            #{user.userPassword},
            #{user.userEmail},
            #{user.userInfo},
            #{user.headImg,jdbcType=BLOB},
            #{user.createTime,jdbcType=TIMESTAMP}
            )
        </foreach>
    </insert>

    <!--批量插入，也支持回写主键-->
    <insert id="insertListWithKeyCallback" useGeneratedKeys="true" keyProperty="id">
        insert into `sys_user` (
        `user_name`,`user_password`,`user_email`,`user_info`,`head_img`,`create_time`
        ) values
        <foreach collection="list" item="user" separator=",">
            (
            #{user.userName},
            #{user.userPassword},
            #{user.userEmail},
            #{user.userInfo},
            #{user.headImg,jdbcType=BLOB},
            #{user.createTime,jdbcType=TIMESTAMP}
            )
        </foreach>
    </insert>

    <!--foreach 实现动态update, 注意这种拼接的思路，同时可以看到$的拼接作用 #的防注入（区分两者的区别）-->
    <update id="updateByMap">
        update `sys_user`
        set
          <foreach collection="_parameter" item="val" index="key" separator=",">
              ${key} = #{val}
          </foreach>
        where id = #{id};
    </update>

    <!--当基于不同数据库运行时，mybatis会根据配置找到合适的sql去执行-->
    <select id="selectByDataBaseProvider" databaseId="mysql"
            resultType="tk.mybatis.simple.model.SysUser04">
        select * from `sys_user` where user_name like concat('%',#{userName},'%');
    </select>

    <select id="selectByDataBaseProvider" databaseId="oracle"
            resultType="tk.mybatis.simple.model.SysUser04">
        select * from `sys_user` where user_name like '%'||#{userName}||'%';
    </select>

    <!--使用if标签和_databaseId实现多数据库的支持，相对比而言，这种方式避免sql的重复-->
    <select id="selectByDataBaseProvider02" resultType="tk.mybatis.simple.model.SysUser04">
        select <include refid="common_sql"/>
          from `sys_user`
        <where>
            <if test="userName != null and userName != ''">
                <if test="_databaseId == 'mysql'">
                    and user_name like concat('%',#{userName},'%')
                </if>
                <if test="_databaseId == 'oracle'">
                    and user_name like '%'||#{userName}||'%'
                </if>
            </if>
            <if test="userEmail != null and userEmail != ''">
                and user_email = #{userEmail}
            </if>
        </where>
    </select>

    <!--这是sql片段，它的定义或者引用指定id 或者 refid即可-->
    <sql id="common_sql">
        id,
        user_name userName,
        user_password userPassword,
        user_email userEmail,
        user_info userInfo,
        head_img headImg,
        create_time createTime
    </sql>

    <!--OGNL用法-->
    <select id="selectByOGNL" resultType="tk.mybatis.simple.model.SysUser04">
        select <include refid="common_sql"/>
        from `sys_user`
        <where>
            <if test="@tk.mybatis.simple.util.MyStringUtil@isNotEmpty(userName)">
                <bind name="print" value="@tk.mybatis.simple.util.MyStringUtil@print(userName)"/>
                and user_name like concat("%",#{userName},"%")
            </if>
        </where>
    </select>
</mapper>